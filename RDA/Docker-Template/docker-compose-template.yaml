# Befehl zum starten mit Image-Erstellen ist:
# docker compose up --build
# Zum starten im Hintergrund das "-d"-Flag (detached) hinzufügen
# 
# Befehl zum beenden des Containers ohne dem "-d"-Flag
# STRG+C
#
# Befehl zum beenden des Containers mit dem "-d"-Flag
# docker compose down

# Befehl zum starten, wenn die Datei NICHT "docker-compose.yaml" heißt:
# docker compose up -f "dateiname"

# Hiermal die minimal Version einer Docker Compose Datei
version: '3.7'
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: test-services
    networks:
      - "default"
    ports:
      - 81:8080

  # "service-name":     (dieser wird auch als DNS-Name im Docker-Netzwerk benutzt)
  #   build:
  #     context: "pfad zum Docker-File"
  #     dockerfile: Dockerfile
  #   container_name: "service-name" (typischerweise der selbe)
  #   restart: unless-stopped
  #   networks:
  #     - "default"
  #   ports:
  #     - computer-port:container-port (container-port ist meist 8080)
  #   volumes:  (optional, nur wenn man Daten auf persistent "halten" will)
  #    - docker-volume:/pfad-im-container (statt docker-volume kann hier auch der Pfad vom Host-Dateisystem stehen)
  #   healthcheck: (optional, damit Docker auf "Funktion" prüfen kann)
  #     test: ["CMD", "curl", "-f", "http://localhost:9000"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   depends_on: (optional, falls man auf andere Services warten muss z.B. RabbitMQ bei EDA)
  #      - service-name
  #   labels:   (optional, wenn man tags an container anfügen will, die im Container nicht gebraucht werden)
  #      - variable=wert
  #   environment:  (optional, falls man im Dockerfile spezielle Variablen angelegt hat z.B. Zugangsdaten für Datenbanken usw.)
  #     container-interne-Variable: Wert


#volumes: (das ist außerhalb der Container-Definition, und erstellt aber vorher definierten Volumes)
#  docker-volume: