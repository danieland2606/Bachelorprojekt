openapi: 3.0.3
info:
  title: Meowmed+
  version: 0.0.1
servers: 
  - url: http://localhost:8081
    description: rda customer testserver
  - url: http://localhost:8082
    description: rda policy testserver
  - url: http://localhost:8071
    description: eda customer testserver
  - url: http://localhost:8072
    description: eda policy testserver
paths:
  /customer:
    get:
      operationId: getCustomerList
      summary: get a list of customers
      tags:
        - customer
      parameters:
        - $ref: '#/components/parameters/CustomerFields'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Customer'
                    - type: object
                      required:
                        - id
          links:
            get:
              $ref: '#/components/links/getCustomer'
            put:
              $ref: '#/components/links/updateCustomer'
        204:
          description: no customers
        400:
          $ref: '#/components/responses/InvalidFields'
        default:
          $ref: '#/components/responses/UnknownError'
    post:
      operationId: createCustomer
      summary: create a new customer
      tags:
        - customer
      requestBody:
        $ref: '#/components/requestBodies/FullCustomer'
      responses:
        201:
          description: customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
          links:
            get:
              $ref: '#/components/links/getCustomer'
            put:
              $ref: '#/components/links/updateCustomer'
        400:
          $ref: '#/components/responses/InvalidCustomer'
        default:
          $ref: '#/components/responses/UnknownError'
  /customer/{customerId}:
    parameters:
      - $ref: '#/components/parameters/CustomerId'
    get:
      operationId: getCustomer
      summary: get a single customer
      tags:
        - customer
      responses:
        200:
          description: customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAllRequired'
        404:
          $ref: '#/components/responses/NoCustomerFound'
        default:
          $ref: '#/components/responses/UnknownError'
#    put:
#      operationId: updateCustomer
#      summary: replace a customer
#      tags:
#        - customer
#      requestBody:
#        $ref: '#/components/requestBodies/FullCustomer'
#      responses:
#        204:
#          description: customer updated
#        404:
#          $ref: '#/components/responses/NoCustomerFound'
#        400:
#          $ref: '#/components/responses/InvalidCustomer'
#        default:
#          $ref: '#/components/responses/UnknownError'
  /customer/{customerId}/policy:
    parameters:
      - $ref: '#/components/parameters/CustomerId'
    get:
      operationId: getPolicyList
      summary: get a list of policies
      tags:
        - policy
      parameters:
        - $ref: '#/components/parameters/PolicyFields'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Policy'
                    - type: object
                      required:
                        - id
          links:
            get:
              $ref: '#/components/links/getPolicy'
            put:
              $ref: '#/components/links/updatePolicy'
        204:
          description: no policies for selected customer
        400:
          $ref: '#/components/responses/InvalidFields'
        default:
          $ref: '#/components/responses/UnknownError'
    post:
      operationId: createPolicy
      summary: create new policy
      tags:
        - policy
      requestBody:
        $ref: '#/components/requestBodies/FullPolicy'
      responses:
        201:
          description: policy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
          links:
            get:
              $ref: '#/components/links/getPolicy'
            put:
              $ref: '#/components/links/updatePolicy'
        400:
          $ref: '#/components/responses/InvalidPolicy'
        default:
          $ref: '#/components/responses/UnknownError'
  /customer/{customerId}/policy/{policyId}:
    parameters:
      - $ref: '#/components/parameters/CustomerId'
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: getPolicy
      summary: get a single policy
      tags:
        - policy
      responses:
        200:
          description: policy found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyAllRequired'
        404:
          $ref: '#/components/responses/NoPolicyFound'
        default:
          $ref: '#/components/responses/UnknownError'
    put:
      operationId: updatePolicy
      summary: replace a policy
      tags:
        - policy
      requestBody:
        $ref: '#/components/requestBodies/FullPolicy'
      responses:
        204:
          description: policy updated
        404:
          $ref: '#/components/responses/NoPolicyFound'
        400:
          $ref: '#/components/responses/InvalidPolicy'
        default:
          $ref: '#/components/responses/UnknownError'
  /policyprice:
    post:
      operationId: calcPolicyPrice
      summary: calculate policy price
      tags:
        - policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyCalc'      
      responses:
        200:
          description: price calculated
          content:
            application/json:
              schema:
                type: object
                properties:
                  premium:
                    type: number
                required:
                  - premium
        400:
          description: invalid customerId or policy data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnknownError'
components:
  parameters:
    CustomerId:
      name: customerId
      in: path
      required: true
      schema:
        type: integer
    CustomerFields:
      name: fields
      in: query
      style: form
      explode: false
      description: >-
        A filter for which properties of Customer should be transmitted. If no 
        fields are specified, only id is transmitted. The value 'address' 
        indicates that the entire Address object should be transmitted. Using 
        'address' and one or more of its sub properties in the same query is a 
        semantic error.
      schema:
        type: array
        uniqueItems: true
        items:
          $ref: '#/components/schemas/CustomerPropertyNames'
    PolicyFields:
      name: fields
      in: query
      style: form
      explode: false
      description: >-
        A filter for which properties of Policy should be transmitted. If no
        fields are specified, only id is transmitted. The value 
        'objectOfInsurance' indicates that the entire ObjectOfInsurance object 
        should be transmitted. Using 'objectOfInsurance' and one or more of its 
        sub properties in the same query is a semantic error.
      schema:
        type: array
        uniqueItems: true
        items:
          $ref: '#/components/schemas/PolicyPropertyNames'
  requestBodies:
    FullCustomer:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerAllRequired'
    FullPolicy:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyAllRequired'
  responses:
    UnknownError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnknownError'
        application/xml:
          schema:
            $ref: '#/components/schemas/UnknownError'
        text/plain:
          schema:
            type: string
        text/html:
          schema:
            type: string
    InvalidCustomer:
      description: invalid customer data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidPolicy:
      description: invalid policy data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidFields:
      description: invalid fields parameter
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoCustomerFound:
      description: no customer at this location
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoPolicyFound:
      description: no policy at this location
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  links:
    getCustomer:
      operationId: getCustomer
      parameters:
        customerId: '$response.body#/id'
    updateCustomer:
      operationId: updateCustomer
      parameters:
        customerId: '$response.body#/id'
    getPolicy:
      operationId: getPolicy
      parameters:
        policyId: '$response.body#/id'
    updatePolicy:
      operationId: updatePolicy
      parameters:
        policyId: '$response.body#/id'
  schemas:
    ID:
      type: object
      properties:
        id:
          type: integer
      required:
        - id
    Error:
      type: object
      properties:
        error:
          type: string
          description: short description of error condition
      required:
        - error
    UnknownError:
      type: object
      additionalProperties: true
      xml:
        name: Error
    Customer:
      type: object
      properties:
        id:
          type: integer 
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        formOfAddress:
          $ref: '#/components/schemas/FormOfAddress'
        title:
          $ref: '#/components/schemas/Title'
        maritalStatus:
          $ref: '#/components/schemas/MaritalStatus'
        dateOfBirth:
          type: string
          format: date
        employmentStatus:
          $ref: '#/components/schemas/EmploymentStatus'
        dogOwner:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
        phoneNumber:
          type: string
          format: phone
        email:
          type: string
          format: email
        bankDetails:
          type: string
          pattern: ^[a-zA-Z]{2}\d{13,32}$
    Address:
      type: object
      properties:
        city:
          type: string
        street:
          type: string
        postalCode:
          type: string
          pattern: ^\d{5}$
    CustomerAllRequired:
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          required:
            - firstName
            - lastName
            - formOfAddress
            - title
            - maritalStatus
            - dateOfBirth
            - employmentStatus
            - dogOwner
            - phoneNumber
            - email
            - bankDetails
            - address
          properties:
            address:
              allOf: 
                - $ref: "#/components/schemas/Address"
                - required:
                    - city
                    - street
                    - postalCode
    CustomerPropertyNames:
      type: string
      enum:
        - firstName
        - lastName
        - formOfAddress
        - title
        - maritalStatus
        - dateOfBirth
        - employmentStatus
        - dogOwner
        - phoneNumber
        - email
        - bankDetails
        - address
        - address.city
        - address.street
        - address.postalCode
    Policy:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        coverage:
          type: number
        premium:
          type: number
          readOnly: true
        objectOfInsurance:
          $ref: '#/components/schemas/ObjectOfInsurance'
    ObjectOfInsurance:
      type: object
      properties:
        name:
          type: string
        race:
          $ref: '#/components/schemas/CatRace'
        color:
          $ref: '#/components/schemas/FurColor'
        dateOfBirth:
          type: string
          format: date
        castrated:
          type: boolean
        personality:
          $ref: '#/components/schemas/Personality'
        environment:
          $ref: '#/components/schemas/Environment'
        weight:
          type: number
    PolicyAllRequired:
      allOf:
        - $ref: '#/components/schemas/Policy'
        - type: object
          required:
            - startDate
            - endDate
            - coverage
            - premium
            - objectOfInsurance
          properties:
            objectOfInsurance:
              allOf: 
                - $ref: "#/components/schemas/ObjectOfInsurance"
                - required:
                    - name
                    - race
                    - color
                    - dateOfBirth
                    - castrated
                    - personality
                    - environment
                    - weight
    PolicyPropertyNames:
      type: string
      enum:
        - startDate
        - endDate
        - coverage
        - premium
        - objectOfInsurance
        - objectOfInsurance.name
        - objectOfInsurance.race
        - objectOfInsurance.color
        - objectOfInsurance.dateOfBirth
        - objectOfInsurance.castrated
        - objectOfInsurance.personality
        - objectOfInsurance.environment
        - objectOfInsurance.weight
    PolicyCalc:
      type: object
      properties:
        customerId:
          type: integer
        policy:
          $ref: '#/components/schemas/PolicyAllRequired'
      required:
        - customerId
        - policy
    FormOfAddress:
      type: string
      enum:
        - herr
        - frau
    Title:
      type: string
      enum:
        - none
        - doctor
        - professor
    MaritalStatus:
      type: string
      enum:
        - ledig
        - verheiratet
        - verwitwet
    EmploymentStatus:
      type: string
      enum:
        - selbststaendig
        - angestellt
        - arbeitslos
        - arbeitssuchend
        - ausbildung
    Personality:
      type: string
      enum:
        - anhaenglich
        - spielerisch
    Environment:
      type: string
      enum:
        - draussen
        - drinnen
    CatRace:
      type: string
      enum:
        - siamese
        - perser
        - bengal
        - maine-coon
        - sphynx
        - scottish-fold
        - british-shorthair
        - abyssinian
        - ragdoll
    FurColor:
      type: string
      enum:
        - seal
        - blau
        - lilac
        - creme
        - weiss
        - schildpatt
        - schwarz
        - braun
        - marmor
        - grau
        - rot
        - zimt